buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'java'
}

apply from: 'helper.gradle'


tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}


group 'worldguardextender'
version '2,1'
sourceCompatibility = JavaVersion.VERSION_1_8

File librariesRuntimeDirectory = new File("libraries_runtime")
File targetJarDirectory = new File("target")

task setupFolders(type: DefaultTask) {doLast{
	librariesRuntimeDirectory.mkdirs()
	targetJarDirectory.mkdirs()
}}

task updateSpigot(type: BuildLibraryTask) {
	targetDirectory = librariesRuntimeDirectory
	targetLibraryName = "spigot-1.13.2-3.jar"
	builderUrl = "https://papermc.io/ci/job/Paper-1.13/488/artifact/paperclip-488.jar"
	buildCommand = "java -Dpaperclip.patchonly=true -jar {BUILDER}"
	builtLibraryName = "cache/patched_1.13.2.jar"
}

task updateRuntimeLibraries(type: UpdateLibrariesTask) {
	directory = librariesRuntimeDirectory
	libraries = [
		[url: "http://nexus.hc.to/content/repositories/pub_releases/net/milkbowl/vault/Vault/1.6.7/Vault-1.6.7.jar", name: "vault-1.jar"],
		[url: "http://builds.enginehub.org/job/worldedit/10826/download/worldedit-bukkit-7.0.0-SNAPSHOT-dist.jar", name: "worldedit-2.jar"],
		[url: "http://builds.enginehub.org/job/worldguard/10829/download/worldguard-legacy-7.0.0-SNAPSHOT-dist.jar", name: "worldguard-2.jar"]
	]
	manualLibraries = new HashSet<>(Arrays.asList(updateSpigot.targetLibraryName))
}

sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
		resources {
			srcDirs = ['resources']
		}
	}
	test {
		java {
			srcDirs = ['tests']
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile fileTree(dir: librariesRuntimeDirectory, include: '*.jar')
}

jar {
	doFirst {
		new File(destinationDir, archiveName).delete()
	}

	from sourceSets.main.java.srcDirs
	from 'LICENSE'

	archiveName = jar.archiveName
}

task copyFinalJarToTarget(type: DefaultTask) {doLast{
	java.nio.file.Files.copy(
		new File(jar.archivePath.getPath()).toPath(),
		new File(targetJarDirectory, jar.baseName + '.jar').toPath(),
		java.nio.file.StandardCopyOption.REPLACE_EXISTING
	)
}}


compileJava.dependsOn(clean)
compileJava.dependsOn(setupFolders)
compileJava.dependsOn(updateSpigot)
compileJava.dependsOn(updateRuntimeLibraries)
jar.finalizedBy(copyFinalJarToTarget)
